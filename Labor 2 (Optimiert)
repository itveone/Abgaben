//Labor 2: Primfaktorzerlegung
// Author: Mariam Ahmadi
// Datum: 24.10.2022



#define _CRT_SECURE_NO_WARNINGS 
#include<stdio.h>

int is_even(int num);
int is_prime(int num);
void print_primes(int num);
void primefactors(int num);

int main(void)
{
    printf("Hallo User :). In this program you can check if a\nnatural number from 1 to infinity is a prime number\nand if it is even or uneven.\n");
    printf("Please enter a number !\n");
    //Aufgabe 2.2: Gerade und ungeraden Zahlen 
    unsigned int num;
    scanf("%u", &num);

    if (is_even(num))
    {
        printf("The number is even ");
    }
    else
    {
        printf("The number is odd ");
    }

    //Aufgabe 2.3: Primzahl oder keine Primzahl
    if (is_prime(num))
    {
        printf("and is a prime.");
    }
    else
    {
        printf("and is not a prime.");
    }

    printf("\n");

    //Aufgabe 2.4: Liste von Primzahl (Begrenzung zu 1000)
    if (num <= 1000)
    {
        printf("List of primes:\n"); //Textausgabe zur 2.4
        print_primes(num);
    }


    //Aufgabe 2.5
    printf("\n");
    printf("List of primefactors:\n"); //Textausgabe zu 2.5
    primefactors(num);
    printf("\n");

    return 0;
}
//MAIN FUNKTION ENDE



//Funktion 2.2: Ist Zahl gerade /ungerade -> Rechnung mit Modulo
int is_even(int num)
{
    if (num % 2 == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }

    return 0;
}

//Funktion: Ist die Zahl eine Primzahl oder nicht -> Hochaddieren 

int is_prime(int num)
{
    if (is_even(num))
    {
        return 0;
    }

    for (int i = 3; i < num; i += 2) // austesten jeder ungeraden zahl ob diese die eingegebene zahl teilen kann
    {
        if (num % i == 0)
        {
            return 0;
        }
    }

    return 1;
}

//Funktion 2.4
void print_primes(int num) // liste für die primenzahlen bis zur eingegebenen zahl
{

    for (int i = 3; i < num; i += 2) // schleife: jede zahl bis zur eingegebenen zahl wird getestet ob primezahl. wenn primzahl dann ausgeben
    {
        if (is_prime(i))
        {
            printf("%4d ", i);
        }

    }

    return;
}

//Funktion 2.5
void primefactors(int num) // Die Liste mit den Primzahlen wird berechnet/ausgelistet, die bis zur int Zahl geht
{

    int startnum = num;

    while ((num%2) == 0)
    {
         printf("2 ");
         num = num / 2;
    }
        
    for (int i = 3; i <= startnum; i=i+2)
    {
        while (num % i == 0)      
        {
            num = num / i;
            printf("%d ", i);
        }
    }

//    while (num % 2 == 0)
//    {
//        num = num / 2;
//        printf("2 ");
//    }
//
//    for (int i = 3; i < num; i += 2) // Der  Computer fängt ab der Zahl 3 an und addiert +2 => Der PC gibt uns die Primzahlen. Man kann auch ab "2" anfangen, und "i++
//       // " angeben,  damit wir ab der ersten Primzahl anfangen und alle Zahlen durchgehen, 
//        {
//       
//
//}

    return;
 }
