//__________________________________
// 
//Programmieren-Praktikum: Aufgabe 4
//Thema: Tic Tac Toe
//Author: Mariam Ahmadi
//Datum: 16.11.2022
//Version: 1 (Bearbeitung)
// 
//__________________________________


//Defines (Standard)
#define _CRT_SECURE_NO_WARNINGS

//This is a tic tac toe game written in C designed for beginners
//(This doesn't contain the use of pointers or other more advanced C topics)
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>

char board[3][3];
const char PLAYER = 'X';
const char COMPUTER = 'O';

void resetBoard();
void printBoard();
int checkFreeSpaces();
void playerMove();
void computerMove();
char checkWinner();
void printWinner(char);

int main()
{
    char winner = ' ';
    char response = ' ';

    //INTRO-TEXT:SPIELEINLEITUNG
    printf("___________________________________________________________________\n\n");
    printf("                    WILLKOMMEN BEI TIC TAC TOE!\n\n");
    printf("___________________________________________________________________\n\n");
    
    printf("    Spielanleitung:\n");
    printf("    In Tic Tac Toe geht es ums Gewinnen und Spasz haben !\n");
    printf("    Hast du als Spieler drei Symbole in einer diagonalen,\n");
    printf("    senkrechten oder horizontalen Reihe gesetzt, hast du gewonnen. \n");
    printf("    Viel Spasz :)\n\n");

    printf("___________________________________________________________________\n\n");
    printf("                           LET'S GO\n");
    printf("___________________________________________________________________\n\n");
    //Einleitung beendet

    do
    {
        winner = ' ';
        response = ' ';
        resetBoard();

        while (winner == ' ' && checkFreeSpaces() != 0)
        {
            printBoard();

            playerMove();
            winner = checkWinner();
            if (winner != ' ' || checkFreeSpaces() == 0)
            {
                break;
            }

            computerMove();
            winner = checkWinner();
            if (winner != ' ' || checkFreeSpaces() == 0)
            {
                break;
            }
        }

        printBoard();
        printWinner(winner);

        printf("\n Möchtest du es nochmal versuchen :) ? (Y/N): ");
        scanf("%c");
        scanf("%c", &response);
        response = toupper(response);
    } while (response == 'Y');

    printf("Thanks for playing!");

    return 0;
}

void resetBoard()
{
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            board[i][j] = ' ';
        }
    }
}
void printBoard()
{
    
    printf(" %c | %c | %c ", board[0][0], board[0][1], board[0][2]);
    printf("\n---|---|---\n");
    printf(" %c | %c | %c ", board[1][0], board[1][1], board[1][2]);
    printf("\n---|---|---\n");
    printf(" %c | %c | %c ", board[2][0], board[2][1], board[2][2]);
    printf("\n\n");
}
int checkFreeSpaces()
{
    int freeSpaces = 9;

    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            if (board[i][j] != ' ')
            {
                freeSpaces--;
            }
        }
    }
    return freeSpaces;
}
void playerMove()
{
    int x;
    int y;

    do
    {
        printf("________________________________________________________________\n\n");
        printf("    SPIELANWEISUNGEN:\n");
        printf("    Gebe bitte einen Wert von 1 bis 3 ein fuer eine Zeile:");
        scanf("%d", &x);
        x--;
        printf("    Gebe bitte einen Wert von 1 bis 3 fuer eine Spalte:");
        scanf("%d", &y);
        y--;
        printf("________________________________________________________________\n\n");

        if (board[x][y] != ' ')
        {
            printf("Dieser Schritt ist leider ungültig !\n");
        }
        else
        {
            board[x][y] = PLAYER;
            break;
        }
    } while (board[x][y] != ' ');

}
void computerMove()
{
    //creates a seed based on current time
    srand(time(0));
    int x;
    int y;

    if (checkFreeSpaces() > 0)
    {
        do
        {
            x = rand() % 3;
            y = rand() % 3;
        } while (board[x][y] != ' ');

        board[x][y] = COMPUTER;
    }
    else
    {
        printWinner(' ');
    }
}
char checkWinner()
{
    //check rows
    for (int i = 0; i < 3; i++)
    {
        if (board[i][0] == board[i][1] && board[i][0] == board[i][2])
        {
            return board[i][0];
        }
    }
    //check columns
    for (int i = 0; i < 3; i++)
    {
        if (board[0][i] == board[1][i] && board[0][i] == board[2][i])
        {
            return board[0][i];
        }
    }
    //check diagonals
    if (board[0][0] == board[1][1] && board[0][0] == board[2][2])
    {
        return board[0][0];
    }
    if (board[0][2] == board[1][1] && board[0][2] == board[2][0])
    {
        return board[0][2];
    }

    return ' ';
}
void printWinner(char winner)
{
    if (winner == PLAYER)
    {
        printf("Du hast gewonnen :)");
    }
    else if (winner == COMPUTER)
    {
        printf("Du hast leider verloren :(");
    }
    else {
        printf("Es ist unentschieden !");
    }
}
